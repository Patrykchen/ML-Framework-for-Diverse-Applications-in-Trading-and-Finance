{
  "add a new column, the value if 0 if the close price is larger than the open price, and is 1 if the open prices is larger than the close price. Also, drop the Date and Adj Close column\nNFLX.csv": {
    "file": "NFLX.csv",
    "code": "\nimport pandas as pd\n\n# Read the data from the CSV file\ndf = pd.read_csv('tmp_data.csv')\n\n# Add a new column based on the open and close prices\ndf['New Column'] = df.apply(lambda x: 0 if x['Close'] > x['Open'] else 1, axis=1)\n\n# Drop the unnecessary columns\ndf.drop(['Date', 'Adj Close'], axis=1, inplace=True)\n\n# Reorder the columns with the target attribute at the last column\ntarget_column = df.pop('New Column')\ndf['New Column'] = target_column\n\n# Save the preprocessed data to a new CSV file\ndf.to_csv('tmp_data.csv', index=False)\n"
  },
  "1. Handle Missing Values: We need to decide how to handle missing values 2. Encode Categorical Variables: Machine learning algorithms require numerical input, so we'll need to encode categorical variables. Besides, data like Date should be converted into a more useful numerical format. Also, the predict target should be transformed into a numerical format since it's our target variable. 3.Feature Selection: Columns like ID is identifiers that are unlikely to have predictive power and can be removed. 5. Numerical Features: Ensure that all numerical features are in the correct format and scale if necessary. 6. Target Selection: select the category as the predict target. 7. Time format: the time format is \"%d-%m-%Y\"\ncredit_card_demo.csv": {
    "query": "1. Handle Missing Values: We need to decide how to handle missing values 2. Encode Categorical Variables: Machine learning algorithms require numerical input, so we'll need to encode categorical variables. Besides, data like Date should be converted into a more useful numerical format. Also, the predict target should be transformed into a numerical format since it's our target variable. 3.Feature Selection: Columns like ID is identifiers that are unlikely to have predictive power and can be removed. 5. Numerical Features: Ensure that all numerical features are in the correct format and scale if necessary. 6. Target Selection: select the category as the predict target. 7. Time format: the time format is \"%d-%m-%Y\"\ncredit_card_demo.csv",
    "file": "credit_card_demo.csv",
    "code": "\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\n\n# Load the data\ndata = pd.read_csv('tmp_data.csv', parse_dates=['Birthdate', 'Date'])\n\n# Handle Missing Values\ndata = data.fillna('Unknown')\n\n# Encode Categorical Variables\ndata['Gender'] = data['Gender'].map({'F': 0, 'M': 1, 'Unknown': 2})\ndata['Category'] = data['Category'].astype('category')\ndata['Category'] = data['Category'].cat.codes\n\n# Convert Date and Birthdate to numerical format\ndata['Birthdate'] = pd.to_datetime(data['Birthdate'], format='%d-%m-%Y').astype(int) / 10**9\ndata['Date'] = pd.to_datetime(data['Date'], format='%d-%m-%Y').astype(int) / 10**9\n\n# Move the Y variable (Category) to the last column\ndata = data[[col for col in data.columns if col != 'Category'] + ['Category']]\n\n# Remove columns like ID\ndata = data.drop(columns=['Customer ID'])\n\n# Scale numerical features if necessary\nnumeric_cols = ['Transaction Amount', 'Birthdate', 'Date']\ndata[numeric_cols] = (data[numeric_cols] - data[numeric_cols].min()) / (data[numeric_cols].max() - data[numeric_cols].min())\n\n# Save the preprocessed data\ndata.to_csv('tmp_data.csv', index=False)\n"
  },
  "1. Handle Missing Values: We need to decide how to handle missing values 2. Encode Categorical Variables: Machine learning algorithms require numerical input, so we'll need to encode categorical variables. Besides, data like Date should be converted into a more useful numerical format. Also, the predict target should be transformed into a numerical format since it's our target variable. 3.Feature Selection: Columns like ID is identifiers that are unlikely to have predictive power and can be removed. 5. Numerical Features: Ensure that all numerical features are in the correct format and scale if necessary. 6. Target Selection: select the category as the predict target. 7. Time format: the time format is \\\"%d-%m-%Y\\\"\n./data/credit_card_demo.csv": {
    "query": "1. Handle Missing Values: We need to decide how to handle missing values 2. Encode Categorical Variables: Machine learning algorithms require numerical input, so we'll need to encode categorical variables. Besides, data like Date should be converted into a more useful numerical format. Also, the predict target should be transformed into a numerical format since it's our target variable. 3.Feature Selection: Columns like ID is identifiers that are unlikely to have predictive power and can be removed. 5. Numerical Features: Ensure that all numerical features are in the correct format and scale if necessary. 6. Target Selection: select the category as the predict target. 7. Time format: the time format is \\\"%d-%m-%Y\\\"\n./data/credit_card_demo.csv",
    "file": "./data/credit_card_demo.csv",
    "code": "\nimport pandas as pd\n\n# Load the data\ndata = pd.read_csv('tmp_data.csv')\n\n# Handle Missing Values\ndata['Gender'].fillna('Unknown', inplace=True)\n\n# Encode Categorical Variables\ndata['Gender'] = data['Gender'].map({'F': 0, 'M': 1, 'Unknown': 2})\ndata['Date'] = pd.to_datetime(data['Date'], format='%d-%m-%Y')\ndata['Category'] = data['Category'].astype('category').cat.codes\n\n# Move Y variable to the last column\ny = data.pop('Category')\ndata['Category'] = y\n\n# Feature Selection\ndata.drop(['Customer ID', 'Name', 'Surname', 'Merchant Name'], axis=1, inplace=True)\n\n# Numerical Features\ndata['Birthdate'] = pd.to_datetime(data['Birthdate'], format='%d-%m-%Y')\ndata['Birthdate'] = (pd.Timestamp('now') - data['Birthdate']).dt.days\ndata['Transaction Amount'] = data['Transaction Amount'].astype(float)\n\n# Target Selection\ntarget = 'Category'\n\n# Save the preprocessed data\ndata.to_csv('tmp_data.csv', index=False)\n"
  },
  "add a new column, the value if 0 if the close price is larger than the open price, and is 1 if the open prices is larger than the close price. Also, drop all the columns except for the Volume column and normalize the Volume\n./data/NFLX.csv": {
    "query": "add a new column, the value if 0 if the close price is larger than the open price, and is 1 if the open prices is larger than the close price. Also, drop all the columns except for the Volume column and normalize the Volume\n./data/NFLX.csv",
    "file": "./data/NFLX.csv",
    "code": "\nimport pandas as pd\n\n# Read the data\ndata = pd.read_csv('tmp_data.csv')\n\n# Add a new column based on open and close prices\ndata['NewColumn'] = data.apply(lambda x: 0 if x['Close'] > x['Open'] else 1, axis=1)\n\n# Drop columns except for Volume\ndata.drop(['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close'], axis=1, inplace=True)\n\n# Normalize the Volume column\ndata['Volume'] = (data['Volume'] - data['Volume'].min()) / (data['Volume'].max() - data['Volume'].min())\n\n# Move the Y variable to the last column\ncolumns = data.columns.tolist()\ncolumns.append(columns.pop(columns.index('NewColumn')))\ndata = data[columns]\n\n# Save the preprocessed data\ndata.to_csv('tmp_data.csv', index=False)\n"
  }
}